<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 9.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="1.36">
 <Targets>
  <Target Name="J:\SourceCode\C#\zControlsC\zControlsC\bin\x86\Release\zControlsC.dll">
   <Modules>
    <Module Name="zcontrolsc.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
       <Issue Name="AttributeTrue" Certainty="95" Level="Error">Consider changing the ComVisible attribute on 'zControlsC.dll' to false, and opting in at the type level.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="zControlsC">
       <Types>
        <Type Name="Form1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#c1XLBook1" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'Form1.c1XLBook1' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StatusChangedEventArgs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.DateTime,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="datetime" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="600">In method 'StatusChangedEventArgs.StatusChangedEventArgs(string, DateTime, string, bool)', correct the spelling of 'datetime' in parameter name 'datetime' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="iscompleted" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="600">In method 'StatusChangedEventArgs.StatusChangedEventArgs(string, DateTime, string, bool)', correct the spelling of 'iscompleted' in parameter name 'iscompleted' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_DateTime" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StatusChangedEventArgs._DateTime' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_IsCompleted" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StatusChangedEventArgs._IsCompleted' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_Message" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StatusChangedEventArgs._Message' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_Operation" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StatusChangedEventArgs._Operation' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zSchedulerReportFile" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'zSchedulerReportFile' because it creates members of the following IDisposable types: 'Timer'. If 'zSchedulerReportFile' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CatalogLocation(zControlsC.zSchedulerReportFile+CatalogType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="429">'zSchedulerReportFile.CatalogLocation(zSchedulerReportFile.CatalogType)' has a cyclomatic complexity of 39. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="429">The 'this' parameter (or 'Me' in Visual Basic) of 'zSchedulerReportFile.CatalogLocation(zSchedulerReportFile.CatalogType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CatalogPassword(zControlsC.zSchedulerReportFile+CatalogType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="345">'zSchedulerReportFile.CatalogPassword(zSchedulerReportFile.CatalogType)' has a cyclomatic complexity of 39. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="345">The 'this' parameter (or 'Me' in Visual Basic) of 'zSchedulerReportFile.CatalogPassword(zSchedulerReportFile.CatalogType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckProperties()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="515">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="519">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="523">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="528">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="533">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="537">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="542">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="545">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="548">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="551">'zSchedulerReportFile.CheckProperties()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="514">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="522">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="527">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="532">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="536">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="541">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="544">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="547">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="550">Replace the call to 'string.operator ==(string, string)' in 'zSchedulerReportFile.CheckProperties()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStatus()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="242">Modify 'zSchedulerReportFile.GetStatus()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="261">Modify 'zSchedulerReportFile.GetStatus()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="228">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'zSchedulerReportFile.GetStatus()' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RandomFileName()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="198">The 'this' parameter (or 'Me' in Visual Basic) of 'zSchedulerReportFile.RandomFileName()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveAsFilename" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC" File="zSchedulerReportFile.cs" Line="147">The discrete term 'Filename' in member name 'zSchedulerReportFile.SaveAsFilename' should be expressed as a compound word, 'FileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StatusChanged" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'zSchedulerReportFile.StatusChangedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zSchedulerReportFile+CatalogType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zSchedulerReportFile.CatalogType'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Fridgidaire_TMS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fridgidaire" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Fridgidaire' in member name 'zSchedulerReportFile.CatalogType.Fridgidaire_TMS' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Maquet" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Maquet" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Maquet' in member name 'zSchedulerReportFile.CatalogType.Maquet' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sika" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Sika" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sika' in member name 'zSchedulerReportFile.CatalogType.Sika' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Slimfast" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Slimfast" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Slimfast' in member name 'zSchedulerReportFile.CatalogType.Slimfast' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Takata" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Takata" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Takata' in member name 'zSchedulerReportFile.CatalogType.Takata' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zSchedulerReportFile+FileFormatEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zSchedulerReportFile.FileFormatEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zSchedulerReportFile.FileFormatEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zSchedulerReportFile+StatusChangedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zSchedulerReportFile.StatusChangedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'zSchedulerReportFile.StatusChangedHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Analyze">
       <Types>
        <Type Name="AnalysisFunctions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetCoEfficent(zControlsC.Charts.zLine)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="AnalysisFunctions.cs" Line="52">'AnalysisFunctions.GetCoEfficent(zLine)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="line" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="AnalysisFunctions.cs" Line="52">Parameter 'line' of 'AnalysisFunctions.GetCoEfficent(zLine)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSlope(zControlsC.Charts.zLine)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="line" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="AnalysisFunctions.cs" Line="30">Parameter 'line' of 'AnalysisFunctions.GetSlope(zLine)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetYIntercept(zControlsC.Charts.zLine)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="line" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="AnalysisFunctions.cs" Line="41">Parameter 'line' of 'AnalysisFunctions.GetYIntercept(zLine)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsPrimeNumber(System.Int64)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="AnalysisFunctions.cs" Line="25">In method 'AnalysisFunctions.IsPrimeNumber(long)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrimeList(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="AnalysisFunctions.cs" Line="133">Change 'List&lt;int&gt;' in 'AnalysisFunctions.PrimeList(int)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'BaseData' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_alLoads" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'BaseData._alLoads' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_isDirty" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'BaseData._isDirty' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDay(zControlsC.Analyze.LoadData,System.Collections.ArrayList&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2560">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'BaseData.AddDay(LoadData, ref ArrayList)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddMonth(zControlsC.Analyze.LoadData,System.Collections.ArrayList&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Concat(System.String,System.String,System.String)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2467">'BaseData.AddMonth(LoadData, ref ArrayList)' calls 'string.Concat(string, string, string)' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2464">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'BaseData.AddMonth(LoadData, ref ArrayList)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2467">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.AddMonth(LoadData, ref ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2467">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.AddMonth(LoadData, ref ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddWeek(zControlsC.Analyze.LoadData,System.Collections.ArrayList&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Concat(System.String,System.String,System.String)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2517">'BaseData.AddWeek(LoadData, ref ArrayList)' calls 'string.Concat(string, string, string)' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2508">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'BaseData.AddWeek(LoadData, ref ArrayList)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2517">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.AddWeek(LoadData, ref ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2517">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.AddWeek(LoadData, ref ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddYear(zControlsC.Analyze.LoadData,System.Collections.ArrayList&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2422">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'BaseData.AddYear(LoadData, ref ArrayList)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPM_PaintBackground(System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2016">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2016">In method 'BaseData.CPM_PaintBackground(ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPM_PaintGridLines(System.Drawing.Graphics&amp;,System.Drawing.Rectangle&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="GridLines" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2041">The compound word 'GridLines' in member name 'BaseData.CPM_PaintGridLines(ref Graphics, ref Rectangle)' exists as a discrete term. If your usage is intended to be single word, case it as 'Gridlines' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2041">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2041">Consider a design that does not require that 'rectChartArea' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2041">In method 'BaseData.CPM_PaintGridLines(ref Graphics, ref Rectangle)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPM_PaintLines(System.Drawing.Graphics&amp;,System.Collections.ArrayList&amp;,System.Drawing.Rectangle&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2071">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2071">Consider a design that does not require that 'al' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2071">Consider a design that does not require that 'rectChartArea' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2071">In method 'BaseData.CPM_PaintLines(ref Graphics, ref ArrayList, ref Rectangle)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPM_PaintTitle(System.Drawing.Graphics&amp;,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2025">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2025">In method 'BaseData.CPM_PaintTitle(ref Graphics, string)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPM_PaintXAxis(System.Drawing.Graphics&amp;,System.Drawing.Rectangle&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2142">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2142">Consider a design that does not require that 'rectChartArea' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2142">In method 'BaseData.CPM_PaintXAxis(ref Graphics, ref Rectangle)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2153">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.CPM_PaintXAxis(ref Graphics, ref Rectangle)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExportToExcel()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1911">'BaseData.ExportToExcel()' calls into 'Process.Start(string)' which has a LinkDemand. By making this call, 'Process.Start(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'BaseData.ExportToExcel()'&#xD;&#xA;   -&gt;'BaseData.ExportToExcel()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindDate(System.DateTime)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Concat(System.Object[])" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1892">'BaseData.FindDate(DateTime)' calls 'string.Concat(params object[])' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
            <Message Id="Date" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1892">In virtual/interface member 'BaseData.FindDate(DateTime)', rename parameter 'date' so that it no longer conflicts with the reserved language keyword 'Date'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindSCAC(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="scac" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1822">In method 'BaseData.FindSCAC(string)', correct the spelling of 'scac' in parameter name 'scac' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStandardDeviationChart_CPM(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1745">'BaseData.GetStandardDeviationChart_CPM(int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStandardDeviationChart_TransitTime()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1792">Change 'BaseData.GetStandardDeviationChart_TransitTime()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTrendChart(zControlsC.Analyze.BaseData+TrendChartTypeEnum,zControlsC.Analyze.BaseData+TrendChartTypeEnum,zControlsC.Analyze.BaseData+TrendChartTotalStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1021">'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' has a cyclomatic complexity of 153. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1021">'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' has a maintainability index of 0. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1021">In method 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)', correct the spelling of 'x' in parameter name 'xAxis' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1520">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1525">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1530">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1535">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1566">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1571">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1576">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1581">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1611">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1616">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1621">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="1626">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.GetTrendChart(BaseData.TrendChartTypeEnum, BaseData.TrendChartTypeEnum, BaseData.TrendChartTotalStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintBackgroundLH(System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2164">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2164">In method 'BaseData.PaintBackgroundLH(ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintGridLinesLH(System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="GridLines" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2185">The compound word 'GridLines' in member name 'BaseData.PaintGridLinesLH(ref Graphics)' exists as a discrete term. If your usage is intended to be single word, case it as 'Gridlines' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2185">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2185">In method 'BaseData.PaintGridLinesLH(ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintLinesLH(System.Drawing.Graphics&amp;,System.Collections.ArrayList&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2214">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2214">Consider a design that does not require that 'al' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2214">In method 'BaseData.PaintLinesLH(ref Graphics, ref ArrayList)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintTitleLH(System.Drawing.Graphics&amp;,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2171">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2171">In method 'BaseData.PaintTitleLH(ref Graphics, string)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintXAxisLH(System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2276">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2276">In method 'BaseData.PaintXAxisLH(ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2289">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'BaseData.PaintXAxisLH(ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SCACs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SCACs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="928">Correct the spelling of 'SCACs' in member name 'BaseData.SCACs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SICs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SICs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="942">Correct the spelling of 'SICs' in member name 'BaseData.SICs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StandardDeviationLinehaul" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Linehaul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="968">Correct the spelling of 'Linehaul' in member name 'BaseData.StandardDeviationLinehaul' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseData+TrendChartTotalStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'BaseData.TrendChartTotalStyle'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Linehaul" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Linehaul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Linehaul' in member name 'BaseData.TrendChartTotalStyle.Linehaul' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseData+TrendChartTypeEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'BaseData.TrendChartTypeEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'BaseData.TrendChartTypeEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CPMData" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDecimal(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3725">Because the behavior of 'Convert.ToDecimal(string)' could vary based on the current user's locale settings, replace this call in 'CPMData.Equals(object)' with a call to 'Convert.ToDecimal(string, IFormatProvider)'. If the result of 'Convert.ToDecimal(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDecimal(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3744">Because the behavior of 'Convert.ToDecimal(string)' could vary based on the current user's locale settings, replace this call in 'CPMData.IComparable.CompareTo(object)' with a call to 'Convert.ToDecimal(string, IFormatProvider)'. If the result of 'Convert.ToDecimal(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3748">Because the behavior of 'Convert.ToDecimal(string)' could vary based on the current user's locale settings, replace this call in 'CPMData.IComparable.CompareTo(object)' with a call to 'Convert.ToDecimal(string, IFormatProvider)'. If the result of 'Convert.ToDecimal(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3735">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'CPMData.ToString()' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DayData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'DayData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'DayData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'DayData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'DayData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.DateTime)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3037">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'DayData.DayData(DateTime)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3071">Make 'DayData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3071">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'DayData.IComparable.CompareTo(object)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3075">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'DayData.IComparable.CompareTo(object)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LaneData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'LaneData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'LaneData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'LaneData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'LaneData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DeleteSCAC(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="scac" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2918">In method 'LaneData.DeleteSCAC(string)', correct the spelling of 'scac' in parameter name 'scac' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2989">Make 'LaneData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="2989">'LaneData.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LanesAnalysis" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'LanesAnalysis' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Data" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Data(System.Data.DataTable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="90" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="81">'LanesAnalysis.Data.set(DataTable)' has a cyclomatic complexity of 48. Rewrite or refactor the method to reduce complexity to 25.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="140">'LanesAnalysis.Data.set(DataTable)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DeleteLoad(System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="520">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.DeleteLoad(long)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="LoadID" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="520">Parameter 'LoadID' of 'LanesAnalysis.DeleteLoad(long)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteMode(zControlsC.Analyze.LaneData,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="362">Consider changing the type of parameter 'lane' in 'LanesAnalysis.DeleteMode(LaneData, string)' from 'LaneData' to its base type 'BaseData'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteSCAC(zControlsC.Analyze.LaneData,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="407">Consider changing the type of parameter 'lane' in 'LanesAnalysis.DeleteSCAC(LaneData, string)' from 'LaneData' to its base type 'BaseData'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="scac" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="407">In method 'LanesAnalysis.DeleteSCAC(LaneData, string)', correct the spelling of 'scac' in parameter name 'scac' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteSIC(zControlsC.Analyze.LaneData,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="452">Consider changing the type of parameter 'lane' in 'LanesAnalysis.DeleteSIC(LaneData, string)' from 'LaneData' to its base type 'BaseData'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterDays(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="561">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.FilterDays(string, LanesAnalysis.FilterBy, decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="561">Parameter 'filterBy' of 'LanesAnalysis.FilterDays(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="mode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="561">Parameter 'mode' of 'LanesAnalysis.FilterDays(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="561">Parameter 'value' of 'LanesAnalysis.FilterDays(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterModes(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="524">In method 'LanesAnalysis.FilterModes(string, LanesAnalysis.FilterBy, decimal)', correct the spelling of 's' in parameter name 'sMode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="524">Parameter 'filterBy' of 'LanesAnalysis.FilterModes(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="sMode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="524">Parameter 'sMode' of 'LanesAnalysis.FilterModes(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="524">Parameter 'value' of 'LanesAnalysis.FilterModes(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterMonths(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="551">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.FilterMonths(string, LanesAnalysis.FilterBy, decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="551">Parameter 'filterBy' of 'LanesAnalysis.FilterMonths(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="mode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="551">Parameter 'mode' of 'LanesAnalysis.FilterMonths(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="551">Parameter 'value' of 'LanesAnalysis.FilterMonths(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterSCACs(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SCACs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="536">Correct the spelling of 'SCACs' in member name 'LanesAnalysis.FilterSCACs(string, LanesAnalysis.FilterBy, decimal)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="536">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.FilterSCACs(string, LanesAnalysis.FilterBy, decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="536">Parameter 'filterBy' of 'LanesAnalysis.FilterSCACs(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="mode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="536">Parameter 'mode' of 'LanesAnalysis.FilterSCACs(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="536">Parameter 'value' of 'LanesAnalysis.FilterSCACs(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterSICs(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SICs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="541">Correct the spelling of 'SICs' in member name 'LanesAnalysis.FilterSICs(string, LanesAnalysis.FilterBy, decimal)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="541">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.FilterSICs(string, LanesAnalysis.FilterBy, decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="541">Parameter 'filterBy' of 'LanesAnalysis.FilterSICs(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="mode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="541">Parameter 'mode' of 'LanesAnalysis.FilterSICs(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="541">Parameter 'value' of 'LanesAnalysis.FilterSICs(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterWeeks(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="556">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.FilterWeeks(string, LanesAnalysis.FilterBy, decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="556">Parameter 'filterBy' of 'LanesAnalysis.FilterWeeks(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="mode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="556">Parameter 'mode' of 'LanesAnalysis.FilterWeeks(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="556">Parameter 'value' of 'LanesAnalysis.FilterWeeks(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FilterYears(System.String,zControlsC.Analyze.LanesAnalysis+FilterBy,System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="546">The 'this' parameter (or 'Me' in Visual Basic) of 'LanesAnalysis.FilterYears(string, LanesAnalysis.FilterBy, decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="filterBy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="546">Parameter 'filterBy' of 'LanesAnalysis.FilterYears(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="mode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="546">Parameter 'mode' of 'LanesAnalysis.FilterYears(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="546">Parameter 'value' of 'LanesAnalysis.FilterYears(string, LanesAnalysis.FilterBy, decimal)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error">Modify 'LanesAnalysis.~LanesAnalysis()' so that it calls Dispose(false) and then returns.</Issue>
            </Message>
            <Message TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'LanesAnalysis' implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDestinations()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="236">Change 'List&lt;string&gt;' in 'LanesAnalysis.GetDestinations()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="236">Change 'LanesAnalysis.GetDestinations()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLane(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="223">Modify 'LanesAnalysis.GetLane(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOrigins()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="231">Change 'List&lt;string&gt;' in 'LanesAnalysis.GetOrigins()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="231">Change 'LanesAnalysis.GetOrigins()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessData(zControlsC.Analyze.LanesAnalysis+LaneTypeEnum)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="245">'LanesAnalysis.ProcessData(LanesAnalysis.LaneTypeEnum)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="246">'LanesAnalysis.ProcessData(LanesAnalysis.LaneTypeEnum)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="257">'LanesAnalysis.ProcessData(LanesAnalysis.LaneTypeEnum)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="258">'LanesAnalysis.ProcessData(LanesAnalysis.LaneTypeEnum)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Regionalize(zControlsC.Analyze.LanesAnalysis+LaneTypeEnum)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="630">Modify 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="639">Modify 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="615">'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="620">'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.Convert.ToDecimal(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="651">Because the behavior of 'Convert.ToDecimal(object)' could vary based on the current user's locale settings, replace this call in 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' with a call to 'Convert.ToDecimal(object, IFormatProvider)'. If the result of 'Convert.ToDecimal(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="651">Because the behavior of 'Convert.ToDecimal(object)' could vary based on the current user's locale settings, replace this call in 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' with a call to 'Convert.ToDecimal(object, IFormatProvider)'. If the result of 'Convert.ToDecimal(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="651">Because the behavior of 'Convert.ToDecimal(object)' could vary based on the current user's locale settings, replace this call in 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' with a call to 'Convert.ToDecimal(object, IFormatProvider)'. If the result of 'Convert.ToDecimal(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="651">Because the behavior of 'Convert.ToInt32(object)' could vary based on the current user's locale settings, replace this call in 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' with a call to 'Convert.ToInt32(object, IFormatProvider)'. If the result of 'Convert.ToInt32(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="651">Because the behavior of 'Convert.ToInt32(object)' could vary based on the current user's locale settings, replace this call in 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)' with a call to 'Convert.ToInt32(object, IFormatProvider)'. If the result of 'Convert.ToInt32(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="laneType" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="610">'laneType', a parameter declared in 'LanesAnalysis.Regionalize(LanesAnalysis.LaneTypeEnum)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Regions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Regions(System.Data.DataTable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="183">'LanesAnalysis.Regions.set(DataTable)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Serialize(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="325">In member 'LanesAnalysis.Serialize(string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeThis(System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="581">Change 'LanesAnalysis.SerializeThis(object)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="579">Replace the call to 'string.operator !=(string, string)' in 'LanesAnalysis.SerializeThis(object)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="752">Change 'LanesAnalysis.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="752">Modify 'LanesAnalysis.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="752">Rename 'LanesAnalysis.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="752">Make 'LanesAnalysis' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LanesAnalysis+FilterBy" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'LanesAnalysis.FilterBy'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#StandardDeviation_Linehaul" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Linehaul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Linehaul' in member name 'LanesAnalysis.FilterBy.StandardDeviation_Linehaul' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TotalLinehaul" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Linehaul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Linehaul' in member name 'LanesAnalysis.FilterBy.TotalLinehaul' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LanesAnalysis+LaneTypeEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'LanesAnalysis.LaneTypeEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'LanesAnalysis.LaneTypeEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LanesAnalysis+RegionalizeObjectData" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'LanesAnalysis.RegionalizeObjectData'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'LanesAnalysis.RegionalizeObjectData' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'LanesAnalysis.RegionalizeObjectData' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Data.DataTable&amp;,System.Int32,System.Int32,zControlsC.Analyze.LanesAnalysis+LaneTypeEnum)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="315">Consider a design that does not require that 'loads' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LanesAnalysis+SerializationData" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'LanesAnalysis.SerializationData'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'LanesAnalysis.SerializationData' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'LanesAnalysis.SerializationData' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(zControlsC.Analyze.LanesAnalysis,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="347">In member 'LanesAnalysis.SerializationData.SerializationData(LanesAnalysis, string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LineHaulData" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3799">Because the behavior of 'Convert.ToDouble(string)' could vary based on the current user's locale settings, replace this call in 'LineHaulData.Equals(object)' with a call to 'Convert.ToDouble(string, IFormatProvider)'. If the result of 'Convert.ToDouble(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDecimal(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3818">Because the behavior of 'Convert.ToDecimal(string)' could vary based on the current user's locale settings, replace this call in 'LineHaulData.IComparable.CompareTo(object)' with a call to 'Convert.ToDecimal(string, IFormatProvider)'. If the result of 'Convert.ToDecimal(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3822">Because the behavior of 'Convert.ToDecimal(string)' could vary based on the current user's locale settings, replace this call in 'LineHaulData.IComparable.CompareTo(object)' with a call to 'Convert.ToDecimal(string, IFormatProvider)'. If the result of 'Convert.ToDecimal(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3809">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'LineHaulData.ToString()' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LoadData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'LoadData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'LoadData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'LoadData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'LoadData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.Int64,System.Decimal,System.Int32,System.Decimal,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4020">In method 'LoadData.LoadData(string, string, long, decimal, int, decimal, string, string, string, string, decimal, string, string, string, string)', correct the spelling of 'd' in parameter name 'dState' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4020">In method 'LoadData.LoadData(string, string, long, decimal, int, decimal, string, string, string, string, decimal, string, string, string, string)', correct the spelling of 'd' in parameter name 'dZip' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4020">In method 'LoadData.LoadData(string, string, long, decimal, int, decimal, string, string, string, string, decimal, string, string, string, string)', correct the spelling of 'o' in parameter name 'oState' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4020">In method 'LoadData.LoadData(string, string, long, decimal, int, decimal, string, string, string, string, decimal, string, string, string, string)', correct the spelling of 'o' in parameter name 'oZip' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="scac" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4020">In method 'LoadData.LoadData(string, string, long, decimal, int, decimal, string, string, string, string, decimal, string, string, string, string)', correct the spelling of 'scac' in parameter name 'scac' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CostPerPound" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CostPerPound()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3994">Modify 'LoadData.CostPerPound.get()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CPM" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CPM()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3964">Modify 'LoadData.CPM.get()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CWT" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CWT()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3979">Modify 'LoadData.CWT.get()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4064">Make 'LoadData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="4050">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'LoadData.ToString()' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TransitTime" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_TransitTime()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3948">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'LoadData.TransitTime.get()' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3949">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'LoadData.TransitTime.get()' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ModeData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'ModeData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'ModeData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'ModeData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'ModeData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3684">Make 'ModeData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3684">'ModeData.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MonthData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'MonthData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MonthData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MonthData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'MonthData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.DateTime)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3271">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'MonthData.MonthData(DateTime)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CPM_PaintTitle(System.Drawing.Graphics&amp;,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3283">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.CPM_PaintTitle(ref Graphics, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3283">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.CPM_PaintTitle(ref Graphics, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3294">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.Equals(object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3294">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.Equals(object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashCode()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3299">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.GetHashCode()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3299">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.GetHashCode()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MonthYear" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_MonthYear()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3245">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.MonthYear.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3245">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.MonthYear.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3308">Make 'MonthData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3311">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'MonthData.IComparable.CompareTo(object)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3312">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'MonthData.IComparable.CompareTo(object)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3289">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3289">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MonthData.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SCACData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'SCACData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'SCACData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'SCACData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'SCACData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="scac" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3479">In method 'SCACData.SCACData(string)', correct the spelling of 'scac' in parameter name 'scac' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3517">Make 'SCACData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3517">'SCACData.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SICData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'SICData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'SICData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'SICData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'SICData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3601">Make 'SICData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3601">'SICData.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WeekData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'WeekData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'WeekData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'WeekData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'WeekData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.DateTime)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3141">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'WeekData.WeekData(DateTime)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3184">Make 'WeekData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3187">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'WeekData.IComparable.CompareTo(object)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3188">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'WeekData.IComparable.CompareTo(object)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WeekYear" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_WeekYear()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3115">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'WeekData.WeekYear.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="YearData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'YearData' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'YearData' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'YearData' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'YearData' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CPM_PaintTitle(System.Drawing.Graphics&amp;,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3394">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'YearData.CPM_PaintTitle(ref Graphics, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3405">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'YearData.Equals(object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashCode()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3410">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'YearData.GetHashCode()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3420">Make 'YearData' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3420">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'YearData.IComparable.CompareTo(object)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Analyze" File="LaneAnalysis.cs" Line="3400">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'YearData.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Charts">
       <Types>
        <Type Name="zLine" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'zLine' because it creates members of the following IDisposable types: 'Timer'. If 'zLine' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="49">Modify the call to 'Timer.Timer(double)' in method 'zLine.zLine(string)' to set the timer interval to a value that's greater than or equal to one second.</Issue>
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="50">Modify the call to 'Timer.Timer(double)' in method 'zLine.zLine(string)' to set the timer interval to a value that's greater than or equal to one second.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DropLineStart()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="268">'zLine.DropLineStart()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DropLineStop()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="277">'zLine.DropLineStop()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="480">Make 'zLine' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IComparable.CompareTo(object)' and is visible to derived classes.</Issue>
            </Message>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="480">'zLine.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#tDropLine_Elapsed(System.Object,System.Timers.ElapsedEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="219">Modify the call to 'Timer.Interval.set(double)' in method 'zLine.tDropLine_Elapsed(object, ElapsedEventArgs)' to set the timer interval to a value that's greater than or equal to one second.</Issue>
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="223">Modify the call to 'Timer.Interval.set(double)' in method 'zLine.tDropLine_Elapsed(object, ElapsedEventArgs)' to set the timer interval to a value that's greater than or equal to one second.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#tThrobbingLine_Elapsed(System.Object,System.Timers.ElapsedEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="296">Modify the call to 'Timer.Interval.set(double)' in method 'zLine.tThrobbingLine_Elapsed(object, ElapsedEventArgs)' to set the timer interval to a value that's greater than or equal to one second.</Issue>
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="300">Modify the call to 'Timer.Interval.set(double)' in method 'zLine.tThrobbingLine_Elapsed(object, ElapsedEventArgs)' to set the timer interval to a value that's greater than or equal to one second.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LineAnimating" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'zLine.LineAnimatingHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zLine+LineAnimatingHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLine.LineAnimatingHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'zLine.LineAnimatingHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLine+LineTypeEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLine.LineTypeEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLine.LineTypeEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLine+Plot" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLine.Plot'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'zLine.Plot' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine.Plot' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine.Plot' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine.Plot' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'zLine.Plot' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="426">Because 'zLine.Plot' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNullPlot" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'zLine.Plot.IsNullPlot' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'zLine.Plot.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLine.cs" Line="445">'zLine.Plot.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Value" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'zLine.Plot.Value' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zLine+PlotShapeEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLine.PlotShapeEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLine.PlotShapeEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLineChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_borderColor" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'zLineChart._borderColor' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_chartAreaF" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'zLineChart._chartAreaF' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_gpStandardDeviationLine" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'zLineChart._gpStandardDeviationLine' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_gpTip" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'zLineChart._gpTip' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddStandardDeviationLine(zControlsC.Charts.zLine)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="946">'zLineChart.AddStandardDeviationLine(zLine)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="_image" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.Designer.cs" Line="16">'zLineChart' contains field 'zLineChart._image' that is of IDisposable type: 'Bitmap'. Change the Dispose method on 'zLineChart' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GridLineColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GridLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="726">The compound word 'GridLine' in member name 'zLineChart.GridLineColor' exists as a discrete term. If your usage is intended to be single word, case it as 'Gridline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HideLine(System.Int32,zControlsC.Charts.zLineChart+LineTypeEnum)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1034">Modify 'zLineChart.HideLine(int, zLineChart.LineTypeEnum)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LegendMouseOverFOntStyle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FOnt" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="660">The compound word 'FOnt' in member name 'zLineChart.LegendMouseOverFOntStyle' exists as a discrete term. If your usage is intended to be single word, case it as 'Font' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Ont" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="660">Correct the spelling of 'Ont' in member name 'zLineChart.LegendMouseOverFOntStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnPaint(System.Windows.Forms.PaintEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1248">Modify 'zLineChart.OnPaint(PaintEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1256">Modify 'zLineChart.OnPaint(PaintEventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ex" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1226">'zLineChart.OnPaint(PaintEventArgs)' declares a variable, 'ex', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintBackground(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1291">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1291">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1291">In method 'zLineChart.PaintBackground(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintGridLines(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="GridLines" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1340">The compound word 'GridLines' in member name 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' exists as a discrete term. If your usage is intended to be single word, case it as 'Gridlines' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1340">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1340">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1340">In method 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1383">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1384">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1392">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1393">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1452">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1453">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1460">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1461">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Single.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1376">Because the behavior of 'float.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'float.ToString(IFormatProvider)'. If the result of 'float.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1377">Because the behavior of 'float.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'float.ToString(IFormatProvider)'. If the result of 'float.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1447">Because the behavior of 'float.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'float.ToString(IFormatProvider)'. If the result of 'float.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1448">Because the behavior of 'float.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintGridLines(ref Graphics, ref Graphics)' with a call to 'float.ToString(IFormatProvider)'. If the result of 'float.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintLegend(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2398">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2398">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2398">In method 'zLineChart.PaintLegend(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintLines(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1499">'zLineChart.PaintLines(ref Graphics, ref Graphics)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1499">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1499">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1499">In method 'zLineChart.PaintLines(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintPlots(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1882">'zLineChart.PaintPlots(ref Graphics, ref Graphics)' has a cyclomatic complexity of 54. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1882">'zLineChart.PaintPlots(ref Graphics, ref Graphics)' has a maintainability index of 12. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message Id="System.Drawing.Point" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1904">'zLineChart.PaintPlots(ref Graphics, ref Graphics)' creates a new instance of 'Point' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2140">'zLineChart.PaintPlots(ref Graphics, ref Graphics)' creates a new instance of 'Point' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2171">'zLineChart.PaintPlots(ref Graphics, ref Graphics)' creates a new instance of 'Point' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2372">'zLineChart.PaintPlots(ref Graphics, ref Graphics)' creates a new instance of 'Point' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1882">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1882">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1882">In method 'zLineChart.PaintPlots(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintStandardDeviationLines(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1772">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1772">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1772">In method 'zLineChart.PaintStandardDeviationLines(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintTip(System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2813">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2813">In method 'zLineChart.PaintTip(ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
            <Message Id="System.Decimal.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2900">Because the behavior of 'decimal.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.PaintTip(ref Graphics)' with a call to 'decimal.ToString(IFormatProvider)'. If the result of 'decimal.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintTitle(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1300">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1300">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1300">In method 'zLineChart.PaintTitle(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintXAxis(System.Drawing.Graphics&amp;,System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2760">Modify 'zLineChart.PaintXAxis(ref Graphics, ref Graphics)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Drawing.Point" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2748">'zLineChart.PaintXAxis(ref Graphics, ref Graphics)' creates a new instance of 'Point' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2677">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2677">Consider a design that does not require that 'bitmap' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2677">In method 'zLineChart.PaintXAxis(ref Graphics, ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaintXAxisHighlight(System.Drawing.Graphics&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2779">Consider a design that does not require that 'g' be a reference parameter.</Issue>
            </Message>
            <Message Id="g" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2779">In method 'zLineChart.PaintXAxisHighlight(ref Graphics)', consider providing a more meaningful name than parameter name 'g'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RoundedRectangle(System.Single,System.Single,System.Drawing.Rectangle,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2922">The 'this' parameter (or 'Me' in Visual Basic) of 'zLineChart.RoundedRectangle(float, float, Rectangle, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="x" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2922">Parameter 'x' of 'zLineChart.RoundedRectangle(float, float, Rectangle, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="y" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="2922">Parameter 'y' of 'zLineChart.RoundedRectangle(float, float, Rectangle, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowGridLines" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GridLines" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="715">The compound word 'GridLines' in member name 'zLineChart.ShowGridLines' exists as a discrete term. If your usage is intended to be single word, case it as 'Gridlines' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowLine(System.Int32,zControlsC.Charts.zLineChart+LineTypeEnum)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="1083">Modify 'zLineChart.ShowLine(int, zLineChart.LineTypeEnum)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowSubTitle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubTitle" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="251">The compound word 'SubTitle' in member name 'zLineChart.ShowSubTitle' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtitle' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubTitle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubTitle" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="228">The compound word 'SubTitle' in member name 'zLineChart.SubTitle' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtitle' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubTitleColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubTitle" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="275">The compound word 'SubTitle' in member name 'zLineChart.SubTitleColor' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtitle' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubTitleSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubTitle" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="299">The compound word 'SubTitle' in member name 'zLineChart.SubTitleSize' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtitle' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#zLineChart_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="3036">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.zLineChart_Load(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="3049">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.zLineChart_Load(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="3062">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'zLineChart.zLineChart_Load(object, EventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Legend_MouseClick" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'zLineChart.Legend_MouseClickHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Legend_MouseMove" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'zLineChart.Legend_MouseMoveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Plot_MouseClick" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'zLineChart.Plot_MouseClickHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Plot_MouseMove" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'zLineChart.Plot_MouseMoveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zLineChart+Legend_MouseClickHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLineChart.Legend_MouseClickHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'zLineChart.Legend_MouseClickHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLineChart+Legend_MouseMoveHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLineChart.Legend_MouseMoveHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'zLineChart.Legend_MouseMoveHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLineChart+LineTypeEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLineChart.LineTypeEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLineChart.LineTypeEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLineChart+Plot_MouseClickHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLineChart.Plot_MouseClickHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'zLineChart.Plot_MouseClickHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLineChart+Plot_MouseMoveHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLineChart.Plot_MouseMoveHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'zLineChart.Plot_MouseMoveHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLineChart+PlotValueFormatEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLineChart.PlotValueFormatEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLineChart.PlotValueFormatEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLinePlotInfo" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#System.IComparable.CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="3136">'zLinePlotInfo.IComparable.CompareTo(object)' makes a call to 'string.CompareTo(string)' that does not explicitly provide a StringComparison. This should be replaced with a call to 'string.Compare(string, string, StringComparison)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zLineTipInfo" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#PlotColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PlotColor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="3175">'zLineTipInfo.PlotColor.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PlotShape" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_PlotShape()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zLineChart.cs" Line="3180">'zLineTipInfo.PlotShape.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="zMapChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="brush" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zMapChart.Designer.cs" Line="16">'zMapChart' contains field 'zMapChart.brush' that is of IDisposable type: 'SolidBrush'. Change the Dispose method on 'zMapChart' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="pen" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zMapChart.Designer.cs" Line="16">'zMapChart' contains field 'zMapChart.pen' that is of IDisposable type: 'Pen'. Change the Dispose method on 'zMapChart' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="transform" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zMapChart.Designer.cs" Line="16">'zMapChart' contains field 'zMapChart.transform' that is of IDisposable type: 'Matrix'. Change the Dispose method on 'zMapChart' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zMapChart.cs" Line="382">Change 'zMapChart.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zMapChart.cs" Line="382">Modify 'zMapChart.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Charts" File="zMapChart.cs" Line="382">Rename 'zMapChart.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Conversion">
       <Types>
        <Type Name="Conversion" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'Conversion' conflicts in whole or in part with the namespace name 'zControlsC.Conversion'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddZero(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="124">In method 'Conversion.AddZero(int)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="126">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Conversion.AddZero(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="130">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'Conversion.AddZero(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deproject(System.Drawing.PointF)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Deproject" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="58">Correct the spelling of 'Deproject' in member name 'Conversion.Deproject(PointF)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExcelColumnLetter(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="242">Modify 'Conversion.ExcelColumnLetter(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExcelColumnNumber(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="258">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Conversion.ExcelColumnNumber(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FullStateToStateCode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="868">'Conversion.FullStateToStateCode(string)' has a cyclomatic complexity of 57. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetState(System.Int32,zControlsC.Conversion.Conversion+GetStateOptions)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="499">'Conversion.GetState(int, Conversion.GetStateOptions)' has a cyclomatic complexity of 68. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="499">'Conversion.GetState(int, Conversion.GetStateOptions)' has a maintainability index of 20. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message Id="Zipcode" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="499">In method 'Conversion.GetState(int, Conversion.GetStateOptions)', correct the spelling of 'Zipcode' in parameter name 'Zipcode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IntegerToMonthString(System.Int32,zControlsC.Conversion.Conversion+IntegerToMonthStringOptions)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="272">'Conversion.IntegerToMonthString(int, Conversion.IntegerToMonthStringOptions)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="272">In method 'Conversion.IntegerToMonthString(int, Conversion.IntegerToMonthStringOptions)', consider providing a more meaningful name than parameter name 'i'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#nz(System.Object,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="148">In method 'Conversion.nz(object, bool)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="148">Replace the call to 'string.operator ==(string, string)' in 'Conversion.nz(object, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseEmailAddress(System.String,zControlsC.Conversion.Conversion+ParseEmailAddressOptions)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="396">In method 'Conversion.ParseEmailAddress(string, Conversion.ParseEmailAddressOptions)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParsePhoneNumber(System.String,zControlsC.Conversion.Conversion+ParsePhoneNumberOptions)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="369">In method 'Conversion.ParsePhoneNumber(string, Conversion.ParsePhoneNumberOptions)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="377">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'Conversion.ParsePhoneNumber(string, Conversion.ParsePhoneNumberOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParsePostalCode(System.String,zControlsC.Conversion.Conversion+ParsePostalCodeOptions)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="424">In method 'Conversion.ParsePostalCode(string, Conversion.ParsePostalCodeOptions)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="428">Replace the call to 'string.operator ==(string, string)' in 'Conversion.ParsePostalCode(string, Conversion.ParsePostalCodeOptions)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="442">Replace the call to 'string.operator ==(string, string)' in 'Conversion.ParsePostalCode(string, Conversion.ParsePostalCodeOptions)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PixelsFromChartValue(System.Decimal,System.Decimal,System.Decimal,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="96">Modify 'Conversion.PixelsFromChartValue(decimal, decimal, decimal, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RoundUp(System.Decimal)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="RoundUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="85">The compound word 'RoundUp' in member name 'Conversion.RoundUp(decimal)' exists as a discrete term. If your usage is intended to be single word, case it as 'Roundup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SQLReplace(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="140">In method 'Conversion.SQLReplace(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StateCodeToFullName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="751">'Conversion.StateCodeToFullName(string)' has a cyclomatic complexity of 58. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Swap`1(!!0&amp;,!!0&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="112">Consider a design that does not require that 'object1' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="112">Consider a design that does not require that 'object2' be a reference parameter.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Conversion" File="Conversion.cs" Line="112">On method 'Conversion.Swap&lt;type&gt;(ref type, ref type)', prefix generic type parameter name 'type' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Conversion+GetStateOptions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Conversion.GetStateOptions'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Conversion.GetStateOptions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Conversion+IntegerToMonthStringOptions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Conversion.IntegerToMonthStringOptions'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Conversion.IntegerToMonthStringOptions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Conversion+ParseEmailAddressOptions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Conversion.ParseEmailAddressOptions'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Conversion.ParseEmailAddressOptions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Conversion+ParsePhoneNumberOptions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Conversion.ParsePhoneNumberOptions'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Conversion.ParsePhoneNumberOptions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Conversion+ParsePostalCodeOptions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Conversion.ParsePostalCodeOptions'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Conversion.ParsePostalCodeOptions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Zipcode" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Zipcode" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Zipcode' in member name 'Conversion.ParsePostalCodeOptions.Zipcode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.DataConnection">
       <Types>
        <Type Name="AccessDBConn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Conn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conn' in type name 'AccessDBConn'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'AccessDBConn' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="20">Be sure to set the DataTable Locale property wherever 'AccessDBConn.AccessDBConn(string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="20">Be sure to set the DataTable Locale property wherever 'AccessDBConn.AccessDBConn(string, string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearQueryResults()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="274">Modify 'AccessDBConn.ClearQueryResults()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillTable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="300">Modify 'AccessDBConn.FillTable()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeConnectionString()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="250">Replace the call to 'string.operator !=(string, string)' in 'AccessDBConn.MakeConnectionString()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#QueryResults" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.QueryResults' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="330">Remove the call to GC.Collect from 'AccessDBConn.IDisposable.Dispose()'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">Change 'AccessDBConn.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message Id="CommandBuilder" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">'AccessDBConn' contains field 'AccessDBConn.CommandBuilder' that is of IDisposable type: 'OleDbCommandBuilder'. Change the Dispose method on 'AccessDBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="da" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">'AccessDBConn' contains field 'AccessDBConn.da' that is of IDisposable type: 'OleDbDataAdapter'. Change the Dispose method on 'AccessDBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="dt" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">'AccessDBConn' contains field 'AccessDBConn.dt' that is of IDisposable type: 'DataTable'. Change the Dispose method on 'AccessDBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">Modify 'AccessDBConn.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">Rename 'AccessDBConn.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="322">Make 'AccessDBConn' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDatabase()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="201">Modify 'AccessDBConn.UpdateDatabase()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="203">Change 'AccessDBConn.UpdateDatabase()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AccessDBConn+SQLStructure" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'AccessDBConn.SQLStructure'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'AccessDBConn.SQLStructure' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="102">Because 'AccessDBConn.SQLStructure' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectField" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.SQLStructure.SelectField' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortBy" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.SQLStructure.SortBy' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.SQLStructure.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WhereClause" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.SQLStructure.WhereClause' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AccessDBConn+StructureFillTable" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'AccessDBConn.StructureFillTable'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'AccessDBConn.StructureFillTable' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DataAdapter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.StructureFillTable.DataAdapter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="AccessDBConn.cs" Line="72">Because 'AccessDBConn.StructureFillTable' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Errors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.StructureFillTable.Errors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rows" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.StructureFillTable.Rows' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AccessDBConn.StructureFillTable.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ACE_AccessDBConn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Conn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conn' in type name 'ACE_AccessDBConn'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ACE_AccessDBConn' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="18">Be sure to set the DataTable Locale property wherever 'ACE_AccessDBConn.ACE_AccessDBConn(string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="18">Be sure to set the DataTable Locale property wherever 'ACE_AccessDBConn.ACE_AccessDBConn(string, string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearQueryResults()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="252">Modify 'ACE_AccessDBConn.ClearQueryResults()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillTable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="278">Modify 'ACE_AccessDBConn.FillTable()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeConnectionString()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="232">Replace the call to 'string.operator ==(string, string)' in 'ACE_AccessDBConn.MakeConnectionString()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#QueryResults" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.QueryResults' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="307">Remove the call to GC.Collect from 'ACE_AccessDBConn.IDisposable.Dispose()'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">Change 'ACE_AccessDBConn.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message Id="CommandBuilder" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">'ACE_AccessDBConn' contains field 'ACE_AccessDBConn.CommandBuilder' that is of IDisposable type: 'OleDbCommandBuilder'. Change the Dispose method on 'ACE_AccessDBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="da" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">'ACE_AccessDBConn' contains field 'ACE_AccessDBConn.da' that is of IDisposable type: 'OleDbDataAdapter'. Change the Dispose method on 'ACE_AccessDBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="dt" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">'ACE_AccessDBConn' contains field 'ACE_AccessDBConn.dt' that is of IDisposable type: 'DataTable'. Change the Dispose method on 'ACE_AccessDBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">Modify 'ACE_AccessDBConn.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">Rename 'ACE_AccessDBConn.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="299">Make 'ACE_AccessDBConn' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDatabase()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="183">Modify 'ACE_AccessDBConn.UpdateDatabase()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="185">Change 'ACE_AccessDBConn.UpdateDatabase()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ACE_AccessDBConn+SQLStructure" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ACE_AccessDBConn.SQLStructure'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ACE_AccessDBConn.SQLStructure' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="99">Because 'ACE_AccessDBConn.SQLStructure' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectField" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.SQLStructure.SelectField' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortBy" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.SQLStructure.SortBy' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.SQLStructure.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WhereClause" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.SQLStructure.WhereClause' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ACE_AccessDBConn+StructureFillTable" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ACE_AccessDBConn.StructureFillTable'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ACE_AccessDBConn.StructureFillTable' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DataAdapter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.StructureFillTable.DataAdapter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_AccessDBConn.cs" Line="69">Because 'ACE_AccessDBConn.StructureFillTable' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Errors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.StructureFillTable.Errors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rows" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.StructureFillTable.Rows' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_AccessDBConn.StructureFillTable.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ACE_ExcelConn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Conn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conn' in type name 'ACE_ExcelConn'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ACE_ExcelConn' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="19">Be sure to set the DataTable Locale property wherever 'ACE_ExcelConn.ACE_ExcelConn(string, bool)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearQueryResults()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="271">Modify 'ACE_ExcelConn.ClearQueryResults()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillTable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="297">Modify 'ACE_ExcelConn.FillTable()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeConnectionString()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="238">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ACE_ExcelConn.MakeConnectionString()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#QueryResults" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.QueryResults' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Field 'ACE_ExcelConn.QueryResults' is a member of type 'ACE_ExcelConn', which is serializable, but is of type 'ACE_ExcelConn.StructureFillTable', which is not serializable. Add the NonSerializedAttribute to 'ACE_ExcelConn.QueryResults'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#structureSQL" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error">Field 'ACE_ExcelConn.structureSQL' is a member of type 'ACE_ExcelConn', which is serializable, but is of type 'ACE_ExcelConn.SQLStructure', which is not serializable. Add the NonSerializedAttribute to 'ACE_ExcelConn.structureSQL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="324">Remove the call to GC.Collect from 'ACE_ExcelConn.IDisposable.Dispose()'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">Change 'ACE_ExcelConn.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message Id="CommandBuilder" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">'ACE_ExcelConn' contains field 'ACE_ExcelConn.CommandBuilder' that is of IDisposable type: 'OleDbCommandBuilder'. Change the Dispose method on 'ACE_ExcelConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="da" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">'ACE_ExcelConn' contains field 'ACE_ExcelConn.da' that is of IDisposable type: 'OleDbDataAdapter'. Change the Dispose method on 'ACE_ExcelConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="dt" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">'ACE_ExcelConn' contains field 'ACE_ExcelConn.dt' that is of IDisposable type: 'DataTable'. Change the Dispose method on 'ACE_ExcelConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">Modify 'ACE_ExcelConn.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">Rename 'ACE_ExcelConn.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="317">Make 'ACE_ExcelConn' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDatabase()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="187">Modify 'ACE_ExcelConn.UpdateDatabase()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="189">Change 'ACE_ExcelConn.UpdateDatabase()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ACE_ExcelConn+SQLStructure" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ACE_ExcelConn.SQLStructure'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ACE_ExcelConn.SQLStructure' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="104">Because 'ACE_ExcelConn.SQLStructure' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectField" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.SQLStructure.SelectField' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortBy" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.SQLStructure.SortBy' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.SQLStructure.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WhereClause" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.SQLStructure.WhereClause' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ACE_ExcelConn+StructureFillTable" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ACE_ExcelConn.StructureFillTable'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ACE_ExcelConn.StructureFillTable' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DataAdapter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.StructureFillTable.DataAdapter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="ACE_ExcelConn.cs" Line="74">Because 'ACE_ExcelConn.StructureFillTable' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Errors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.StructureFillTable.Errors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rows" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.StructureFillTable.Rows' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ACE_ExcelConn.StructureFillTable.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="dbf_DBConn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Conn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conn' in type name 'dbf_DBConn'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'dbf_DBConn' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="18">Be sure to set the DataTable Locale property wherever 'dbf_DBConn.dbf_DBConn(string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearQueryResults()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="234">Modify 'dbf_DBConn.ClearQueryResults()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillTable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="259">Modify 'dbf_DBConn.FillTable()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#QueryResults" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.QueryResults' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="284">Remove the call to GC.Collect from 'dbf_DBConn.IDisposable.Dispose()'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">Change 'dbf_DBConn.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message Id="CommandBuilder" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">'dbf_DBConn' contains field 'dbf_DBConn.CommandBuilder' that is of IDisposable type: 'OleDbCommandBuilder'. Change the Dispose method on 'dbf_DBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="da" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">'dbf_DBConn' contains field 'dbf_DBConn.da' that is of IDisposable type: 'OleDbDataAdapter'. Change the Dispose method on 'dbf_DBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="dt" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">'dbf_DBConn' contains field 'dbf_DBConn.dt' that is of IDisposable type: 'DataTable'. Change the Dispose method on 'dbf_DBConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">Modify 'dbf_DBConn.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">Rename 'dbf_DBConn.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="277">Make 'dbf_DBConn' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDatabase()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="172">Modify 'dbf_DBConn.UpdateDatabase()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="174">Change 'dbf_DBConn.UpdateDatabase()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="dbf_DBConn+SQLStructure" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'dbf_DBConn.SQLStructure'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'dbf_DBConn.SQLStructure' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="98">Because 'dbf_DBConn.SQLStructure' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectField" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.SQLStructure.SelectField' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SortBy" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.SQLStructure.SortBy' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.SQLStructure.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WhereClause" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.SQLStructure.WhereClause' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="dbf_DBConn+StructureFillTable" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'dbf_DBConn.StructureFillTable'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'dbf_DBConn.StructureFillTable' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DataAdapter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.StructureFillTable.DataAdapter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="dbf_DBConn.cs" Line="68">Because 'dbf_DBConn.StructureFillTable' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Errors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.StructureFillTable.Errors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rows" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.StructureFillTable.Rows' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'dbf_DBConn.StructureFillTable.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MSAccess_Functions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RunAccessMacro(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="MSAccess_Functions.cs" Line="20">Modify 'MSAccess_Functions.RunAccessMacro(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="MSAccess_Functions.cs" Line="14">'MSAccess_Functions.RunAccessMacro(string, string)' calls into 'Process.Start(string, string)' which has a LinkDemand. By making this call, 'Process.Start(string, string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MSAccess_Functions.RunAccessMacro(string, string)'&#xD;&#xA;   -&gt;'MSAccess_Functions.RunAccessMacro(string, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="MSAccess_Functions.cs" Line="14">'MSAccess_Functions.RunAccessMacro(string, string)' calls into 'Process.WaitForExit()' which has a LinkDemand. By making this call, 'Process.WaitForExit()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MSAccess_Functions.RunAccessMacro(string, string)'&#xD;&#xA;   -&gt;'MSAccess_Functions.RunAccessMacro(string, string)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SQLServerConn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Conn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Conn' in type name 'SQLServerConn'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="20">Be sure to set the DataTable Locale property wherever 'SQLServerConn.SQLServerConn(string, string, string, string)' creates an instance of that type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClearQueryResults()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="271">Modify 'SQLServerConn.ClearQueryResults()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="CommandBuilder" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="319">'SQLServerConn' contains field 'SQLServerConn.CommandBuilder' that is of IDisposable type: 'OleDbCommandBuilder'. Change the Dispose method on 'SQLServerConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="da" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="319">'SQLServerConn' contains field 'SQLServerConn.da' that is of IDisposable type: 'OleDbDataAdapter'. Change the Dispose method on 'SQLServerConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="db" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="319">'SQLServerConn' contains field 'SQLServerConn.db' that is of IDisposable type: 'OleDbConnection'. Change the Dispose method on 'SQLServerConn' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="dt" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="319">'SQLServerConn' contains field 'SQLServerConn.dt' that is of IDisposable type: 'DataTable'. Change the Dispose method on 'SQLServerConn' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillTable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="295">Modify 'SQLServerConn.FillTable()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#QueryResults" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.QueryResults' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="342">Remove the call to GC.Collect from 'SQLServerConn.IDisposable.Dispose()'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="335">Change 'SQLServerConn.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="335">Modify 'SQLServerConn.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="335">Rename 'SQLServerConn.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDatabase()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="211">Modify 'SQLServerConn.UpdateDatabase()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="213">Change 'SQLServerConn.UpdateDatabase()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SQLServerConn+SQLStructure" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SQLServerConn.SQLStructure'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'SQLServerConn.SQLStructure' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="115">Because 'SQLServerConn.SQLStructure' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectField" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.SQLStructure.SelectField' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.SQLStructure.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WhereClause" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.SQLStructure.WhereClause' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SQLServerConn+StructureFillTable" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SQLServerConn.StructureFillTable'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'SQLServerConn.StructureFillTable' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DataAdapter" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.StructureFillTable.DataAdapter' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\DataConnections" File="SQLServerConn.cs" Line="85">Because 'SQLServerConn.StructureFillTable' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Errors" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.StructureFillTable.Errors' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rows" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.StructureFillTable.Rows' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Table" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SQLServerConn.StructureFillTable.Table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Encryption">
       <Types>
        <Type Name="EncryptFiles" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateIV(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="110">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptFiles.CreateIV(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateKey(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="75">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptFiles.CreateKey(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="fsInput" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="316">'EncryptFiles' contains field 'EncryptFiles.fsInput' that is of IDisposable type: 'FileStream'. Change the Dispose method on 'EncryptFiles' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="fsOutput" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="316">'EncryptFiles' contains field 'EncryptFiles.fsOutput' that is of IDisposable type: 'FileStream'. Change the Dispose method on 'EncryptFiles' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptOrDecryptFile(System.String,System.String,System.Byte[],System.Byte[],zControlsC.Encryption.EncryptFiles+CryptoAction)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Concat(System.String,System.String)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="StringCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="234">'EncryptFiles.EncryptOrDecryptFile(string, string, byte[], byte[], EncryptFiles.CryptoAction)' calls 'string.Concat(string, string)' but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="287">'EncryptFiles.EncryptOrDecryptFile(string, string, byte[], byte[], EncryptFiles.CryptoAction)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="301">'EncryptFiles.EncryptOrDecryptFile(string, string, byte[], byte[], EncryptFiles.CryptoAction)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptFiles.cs" Line="332">Rename 'EncryptFiles.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptStrings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EncryptString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PlainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptStrings.cs" Line="13">In member 'EncryptStrings.EncryptString(string)', the compound word 'PlainText' in parameter name 'PlainText' exists as a discrete term. If your usage is intended to be single word, case it as 'Plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptString(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PlainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="EncryptStrings.cs" Line="20">In member 'EncryptStrings.EncryptString(string, string)', the compound word 'PlainText' in parameter name 'PlainText' exists as a discrete term. If your usage is intended to be single word, case it as 'Plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RijndaelEnhanced" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="375">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'RijndaelEnhanced.RijndaelEnhanced(string, string, int, int, int, string, string, int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="542">In member 'RijndaelEnhanced.Decrypt(byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'cipherTextBytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptToBytes(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="573">In member 'RijndaelEnhanced.DecryptToBytes(byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'cipherTextBytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="plainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="456">In member 'RijndaelEnhanced.Encrypt(byte[])', the compound word 'plainText' in parameter name 'plainTextBytes' exists as a discrete term. If your usage is intended to be single word, case it as 'plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="456">In member 'RijndaelEnhanced.Encrypt(byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'plainTextBytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="plainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="442">In member 'RijndaelEnhanced.Encrypt(string)', the compound word 'plainText' in parameter name 'plainText' exists as a discrete term. If your usage is intended to be single word, case it as 'plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptToBytes(System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="plainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="486">In member 'RijndaelEnhanced.EncryptToBytes(byte[])', the compound word 'plainText' in parameter name 'plainTextBytes' exists as a discrete term. If your usage is intended to be single word, case it as 'plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="486">In member 'RijndaelEnhanced.EncryptToBytes(byte[])', consider replacing the data type identifier 'Bytes' in parameter name 'plainTextBytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptToBytes(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="plainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="470">In member 'RijndaelEnhanced.EncryptToBytes(string)', the compound word 'plainText' in parameter name 'plainText' exists as a discrete term. If your usage is intended to be single word, case it as 'plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateRandomNumber(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Encryption" File="RijndaelEnhanced.cs" Line="722">The 'this' parameter (or 'Me' in Visual Basic) of 'RijndaelEnhanced.GenerateRandomNumber(int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.ExcelEx">
       <Types>
        <Type Name="ColumnFormatter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string)', correct the spelling of 'c' in parameter name 'cName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,zControlsC.ExcelEx.ExcelWorkbook+CellStyle,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int)', correct the spelling of 'c' in parameter name 'cName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int)', correct the spelling of 'c' in parameter name 'cStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int)', correct the spelling of 'c' in parameter name 'cWidth' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,zControlsC.ExcelEx.ExcelWorkbook+CellStyle,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cWidth' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, int, ExcelWorkbook.CellStyle)', correct the spelling of 'h' in parameter name 'hStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,zControlsC.ExcelEx.ExcelWorkbook+CellStyle,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cName' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, ExcelWorkbook.CellStyle)', correct the spelling of 'c' in parameter name 'cStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1894">In method 'ColumnFormatter.ColumnFormatter(string, ExcelWorkbook.CellStyle, ExcelWorkbook.CellStyle)', correct the spelling of 'h' in parameter name 'hStyle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ColumnHeaderStyle" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ColumnFormatter.ColumnHeaderStyle' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ColumnName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ColumnFormatter.ColumnName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ColumnStyle" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ColumnFormatter.ColumnStyle' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ColumnWidth" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ColumnFormatter.ColumnWidth' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ColumnFormatterList" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Data.DataTable&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1758">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddColumn(zControlsC.ExcelEx.ColumnFormatter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1869">In method 'ColumnFormatterList.AddColumn(ColumnFormatter)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDataTableColumns(System.Data.DataTable&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1766">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbook" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddDataRows(System.Int32,System.Data.DataTable&amp;,zControlsC.ExcelEx.ExcelWorkbook+AlternatingRowsStructure,zControlsC.ExcelEx.ColumnFormatterList)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="zControlsC.ExcelEx.ExcelWorkbook+CellStyle" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1059">'ExcelWorkbook.AddDataRows(int, ref DataTable, ExcelWorkbook.AlternatingRowsStructure, ColumnFormatterList)' creates a new instance of 'ExcelWorkbook.CellStyle' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddHeaderRow(System.Int32,System.Data.DataTable&amp;,zControlsC.ExcelEx.ColumnFormatterList)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="dt" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="951">Parameter 'dt' of 'ExcelWorkbook.AddHeaderRow(int, ref DataTable, ColumnFormatterList)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Data.DataTable&amp;,zControlsC.ExcelEx.ColumnFormatterList,zControlsC.ExcelEx.ExcelWorkbook+AlternatingRowsStructure)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1189">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1189">In method 'ExcelWorkbook.AddSheet(string, ref DataTable, ColumnFormatterList, ExcelWorkbook.AlternatingRowsStructure)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1189">In method 'ExcelWorkbook.AddSheet(string, ref DataTable, ColumnFormatterList, ExcelWorkbook.AlternatingRowsStructure)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Data.DataTable&amp;,zControlsC.ExcelEx.ExcelWorkbook+AlternatingRowsStructure)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1178">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1178">In method 'ExcelWorkbook.AddSheet(string, ref DataTable, ExcelWorkbook.AlternatingRowsStructure)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Data.DataTable,zControlsC.ExcelEx.ColumnFormatterList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1211">In method 'ExcelWorkbook.AddSheet(string, DataTable, ColumnFormatterList)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Drawing.Color,System.Data.DataTable&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1130">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Drawing.Color,System.Data.DataTable&amp;,zControlsC.ExcelEx.ColumnFormatterList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1142">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1142">In method 'ExcelWorkbook.AddSheet(string, Color, ref DataTable, ColumnFormatterList)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Drawing.Color,System.Data.DataTable&amp;,zControlsC.ExcelEx.ColumnFormatterList,zControlsC.ExcelEx.ExcelWorkbook+AlternatingRowsStructure)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1166">Consider a design that does not require that 'dt' be a reference parameter.</Issue>
            </Message>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1166">In method 'ExcelWorkbook.AddSheet(string, Color, ref DataTable, ColumnFormatterList, ExcelWorkbook.AlternatingRowsStructure)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1166">In method 'ExcelWorkbook.AddSheet(string, Color, ref DataTable, ColumnFormatterList, ExcelWorkbook.AlternatingRowsStructure)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Drawing.Color,System.Data.DataTable,zControlsC.ExcelEx.ExcelWorkbook+AlternatingRowsStructure)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1154">In method 'ExcelWorkbook.AddSheet(string, Color, DataTable, ExcelWorkbook.AlternatingRowsStructure)', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Drawing.Color,System.Object[,])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1284">In method 'ExcelWorkbook.AddSheet(string, Color, object[,])', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="2#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1284">'a' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1329">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.AddSheet(string, Color, object[,])' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1326">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.AddSheet(string, Color, object[,])' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSheet(System.String,System.Object[,])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1222">In method 'ExcelWorkbook.AddSheet(string, object[,])', consider providing a more meaningful name than parameter name 'a'.</Issue>
            </Message>
            <Message Id="1#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1222">'a' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1266">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.AddSheet(string, object[,])' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1263">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.AddSheet(string, object[,])' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateStyle(zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1356">'ExcelWorkbook.CreateStyle(ExcelWorkbook.CellStyle)' has a cyclomatic complexity of 90. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1356">'ExcelWorkbook.CreateStyle(ExcelWorkbook.CellStyle)' has a maintainability index of 14. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteSheet(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="482">Modify 'ExcelWorkbook.DeleteSheet(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteSheet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="466">Modify 'ExcelWorkbook.DeleteSheet(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1718">Modify 'ExcelWorkbook.Dispose(bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HideColumn(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="799">Modify 'ExcelWorkbook.HideColumn(int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="792">In method 'ExcelWorkbook.HideColumn(int, int)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HideColumn(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="784">Modify 'ExcelWorkbook.HideColumn(string, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="777">In method 'ExcelWorkbook.HideColumn(string, int)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HideSheet(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="372">Modify 'ExcelWorkbook.HideSheet(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HideSheet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="356">Modify 'ExcelWorkbook.HideSheet(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetActiveSheet(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="436">Modify 'ExcelWorkbook.SetActiveSheet(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetActiveSheet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="421">Modify 'ExcelWorkbook.SetActiveSheet(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellFormula(System.String,System.Int32,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="598">Modify 'ExcelWorkbook.SetCellFormula(string, int, int, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellStyle(System.Int32,System.Int32,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="673">Modify 'ExcelWorkbook.SetCellStyle(int, int, int, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellStyle(System.String,System.Int32,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="658">Modify 'ExcelWorkbook.SetCellStyle(string, int, int, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellValue(System.Int32,System.Int32,System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="583">Modify 'ExcelWorkbook.SetCellValue(int, int, int, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellValue(System.Int32,System.Int32,System.Int32,System.Object,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="643">Modify 'ExcelWorkbook.SetCellValue(int, int, int, object, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellValue(System.Int32,System.Int32,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="613">Modify 'ExcelWorkbook.SetCellValue(int, int, int, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellValue(System.String,System.Int32,System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="568">Modify 'ExcelWorkbook.SetCellValue(string, int, int, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetCellValue(System.String,System.Int32,System.Int32,System.Object,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="628">Modify 'ExcelWorkbook.SetCellValue(string, int, int, object, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColumnFormat(System.Int32,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="707">Modify 'ExcelWorkbook.SetColumnFormat(int, int, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="700">In method 'ExcelWorkbook.SetColumnFormat(int, int, string)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColumnFormat(System.String,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="692">Modify 'ExcelWorkbook.SetColumnFormat(string, int, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="685">In method 'ExcelWorkbook.SetColumnFormat(string, int, string)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColumnStyle(System.Int32,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="737">Modify 'ExcelWorkbook.SetColumnStyle(int, int, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="730">In method 'ExcelWorkbook.SetColumnStyle(int, int, ExcelWorkbook.CellStyle)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColumnStyle(System.String,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="722">Modify 'ExcelWorkbook.SetColumnStyle(string, int, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="715">In method 'ExcelWorkbook.SetColumnStyle(string, int, ExcelWorkbook.CellStyle)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColumnWidth(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="769">Modify 'ExcelWorkbook.SetColumnWidth(int, int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="761">In method 'ExcelWorkbook.SetColumnWidth(int, int, int)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Width*107" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="765">Correct the potential overflow in the operation 'Width*107' in 'ExcelWorkbook.SetColumnWidth(int, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColumnWidth(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="753">Modify 'ExcelWorkbook.SetColumnWidth(string, int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="745">In method 'ExcelWorkbook.SetColumnWidth(string, int, int)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Width*107" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="749">Correct the potential overflow in the operation 'Width*107' in 'ExcelWorkbook.SetColumnWidth(string, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetGridlines(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="535">Modify 'ExcelWorkbook.SetGridlines(string, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetGridlinesColor(System.String,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="549">Modify 'ExcelWorkbook.SetGridlinesColor(string, Color)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="542">In method 'ExcelWorkbook.SetGridlinesColor(string, Color)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRowHeight(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="916">Modify 'ExcelWorkbook.SetRowHeight(int, int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="908">In method 'ExcelWorkbook.SetRowHeight(int, int, int)', correct the spelling of 'i' in parameter name 'iRow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Height*20" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="912">Correct the potential overflow in the operation 'Height*20' in 'ExcelWorkbook.SetRowHeight(int, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRowHeight(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="900">Modify 'ExcelWorkbook.SetRowHeight(string, int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="892">In method 'ExcelWorkbook.SetRowHeight(string, int, int)', correct the spelling of 'i' in parameter name 'iRow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Height*20" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="896">Correct the potential overflow in the operation 'Height*20' in 'ExcelWorkbook.SetRowHeight(string, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRowStyle(System.Int32,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="884">Modify 'ExcelWorkbook.SetRowStyle(int, int, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="877">In method 'ExcelWorkbook.SetRowStyle(int, int, ExcelWorkbook.CellStyle)', correct the spelling of 'i' in parameter name 'iRow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRowStyle(System.String,System.Int32,zControlsC.ExcelEx.ExcelWorkbook+CellStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="869">Modify 'ExcelWorkbook.SetRowStyle(string, int, ExcelWorkbook.CellStyle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="862">In method 'ExcelWorkbook.SetRowStyle(string, int, ExcelWorkbook.CellStyle)', correct the spelling of 'i' in parameter name 'iRow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetSheetName(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="451">Modify 'ExcelWorkbook.SetSheetName(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="444">In method 'ExcelWorkbook.SetSheetName(string, string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTabColor(System.Int32,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="516">Modify 'ExcelWorkbook.SetTabColor(int, Color)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="509">In method 'ExcelWorkbook.SetTabColor(int, Color)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTabColor(System.String,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="501">Modify 'ExcelWorkbook.SetTabColor(string, Color)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="494">In method 'ExcelWorkbook.SetTabColor(string, Color)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowColumn(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="829">Modify 'ExcelWorkbook.ShowColumn(int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="822">In method 'ExcelWorkbook.ShowColumn(int, int)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowColumn(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="814">Modify 'ExcelWorkbook.ShowColumn(string, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="807">In method 'ExcelWorkbook.ShowColumn(string, int)', correct the spelling of 'i' in parameter name 'iColumn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowSheet(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="402">Modify 'ExcelWorkbook.ShowSheet(int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowSheet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="387">Modify 'ExcelWorkbook.ShowSheet(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="1746">Rename 'ExcelWorkbook.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbook+AlternatingRowsStructure" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.AlternatingRowsStructure'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'ExcelWorkbook.AlternatingRowsStructure' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ExcelWorkbook.AlternatingRowsStructure' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#RowBackColor" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelWorkbook.AlternatingRowsStructure.RowBackColor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RowForeColor" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelWorkbook.AlternatingRowsStructure.RowForeColor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbook+CellStyle" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.CellStyle'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'ExcelWorkbook.CellStyle' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'ExcelWorkbook.CellStyle' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dafault" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="121">In method 'ExcelWorkbook.CellStyle.CellStyle(bool)', correct the spelling of 'Dafault' in parameter name 'DafaultValue' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="DafaultValue" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="121">Parameter 'DafaultValue' of 'ExcelWorkbook.CellStyle.CellStyle(bool)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AlignHorz" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Horz" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="144">Correct the spelling of 'Horz' in member name 'ExcelWorkbook.CellStyle.AlignHorz' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AlignVert" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Vert" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\ExcelEx" File="ExcelWorkbook.cs" Line="150">Correct the spelling of 'Vert' in member name 'ExcelWorkbook.CellStyle.AlignVert' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbook+CellStyleAlignHorz" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Horz" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Horz' in type name 'ExcelWorkbook.CellStyleAlignHorz'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.CellStyleAlignHorz'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelWorkbook+CellStyleAlignVert" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vert" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vert' in type name 'ExcelWorkbook.CellStyleAlignVert'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.CellStyleAlignVert'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelWorkbook+CellStyleBackPattern" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.CellStyleBackPattern'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DiagonalCrossHatch" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CrossHatch" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'CrossHatch' in member name 'ExcelWorkbook.CellStyleBackPattern.DiagonalCrossHatch' exists as a discrete term. If your usage is intended to be single word, case it as 'Crosshatch' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThickDiagonalCrossHatch" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CrossHatch" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'CrossHatch' in member name 'ExcelWorkbook.CellStyleBackPattern.ThickDiagonalCrossHatch' exists as a discrete term. If your usage is intended to be single word, case it as 'Crosshatch' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThinDiagonalCrossHatch" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CrossHatch" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'CrossHatch' in member name 'ExcelWorkbook.CellStyleBackPattern.ThinDiagonalCrossHatch' exists as a discrete term. If your usage is intended to be single word, case it as 'Crosshatch' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThinHorizontalCrossHatch" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CrossHatch" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'CrossHatch' in member name 'ExcelWorkbook.CellStyleBackPattern.ThinHorizontalCrossHatch' exists as a discrete term. If your usage is intended to be single word, case it as 'Crosshatch' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbook+CellStyleBorder" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.CellStyleBorder'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelWorkbook+ExcelFileFormat" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorkbook.ExcelFileFormat'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Functions">
       <Types>
        <Type Name="zFunctions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OpenEmail(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Functions" File="zFunctions.cs" Line="36">Modify 'zFunctions.OpenEmail(string, string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Functions" File="zFunctions.cs" Line="14">'zFunctions.OpenEmail(string, string, string)' calls into 'Process.Start(string)' which has a LinkDemand. By making this call, 'Process.Start(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'zFunctions.OpenEmail(string, string, string)'&#xD;&#xA;   -&gt;'zFunctions.OpenEmail(string, string, string)'</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Functions" File="zFunctions.cs" Line="14">The 'this' parameter (or 'Me' in Visual Basic) of 'zFunctions.OpenEmail(string, string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Functions" File="zFunctions.cs" Line="17">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'zFunctions.OpenEmail(string, string, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.GIS.NorthAmerica">
       <Types>
        <Type Name="StateBorder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;System.Drawing.PointF&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="34">Change 'List&lt;List&lt;PointF&gt;&gt;' in 'StateBorder.StateBorder(string, List&lt;List&lt;PointF&gt;&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="34">Consider a design where 'StateBorder.StateBorder(string, List&lt;List&lt;PointF&gt;&gt;)' doesn't nest generic type 'List&lt;List&lt;PointF&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPoints(System.Collections.Generic.List`1&lt;System.Drawing.PointF&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="69">Change 'List&lt;PointF&gt;' in 'StateBorder.AddPoints(List&lt;PointF&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CenterPoints" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="56">Change 'List&lt;PointF&gt;' in 'StateBorder.CenterPoints' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GeoBorders" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="50">Change 'List&lt;List&lt;PointF&gt;&gt;' in 'StateBorder.GeoBorders' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="50">Consider a design where 'StateBorder.GeoBorders' doesn't nest generic type 'List&lt;List&lt;PointF&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProjectedBorder()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="75">Change 'List&lt;List&lt;PointF&gt;&gt;' in 'StateBorder.ProjectedBorder()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="StateBorder.cs" Line="75">Consider a design where 'StateBorder.ProjectedBorder()' doesn't nest generic type 'List&lt;List&lt;PointF&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Zip3Border" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Collections.Generic.List`1&lt;System.Collections.Generic.List`1&lt;System.Drawing.PointF&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="34">Change 'List&lt;List&lt;PointF&gt;&gt;' in 'Zip3Border.Zip3Border(string, List&lt;List&lt;PointF&gt;&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="34">Consider a design where 'Zip3Border.Zip3Border(string, List&lt;List&lt;PointF&gt;&gt;)' doesn't nest generic type 'List&lt;List&lt;PointF&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPoints(System.Collections.Generic.List`1&lt;System.Drawing.PointF&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="67">Change 'List&lt;PointF&gt;' in 'Zip3Border.AddPoints(List&lt;PointF&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CenterPoints" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="56">Change 'List&lt;PointF&gt;' in 'Zip3Border.CenterPoints' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GeoBorders" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="51">Change 'List&lt;List&lt;PointF&gt;&gt;' in 'Zip3Border.GeoBorders' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="51">Consider a design where 'Zip3Border.GeoBorders' doesn't nest generic type 'List&lt;List&lt;PointF&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProjectedBorder()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="73">Change 'List&lt;List&lt;PointF&gt;&gt;' in 'Zip3Border.ProjectedBorder()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="73">Consider a design where 'Zip3Border.ProjectedBorder()' doesn't nest generic type 'List&lt;List&lt;PointF&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\GIS\NorthAmerica" File="Zip3Border.cs" Line="143">Make 'Zip3Border' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDeserializationCallback.OnDeserialization(object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Random">
       <Types>
        <Type Name="Random" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'Random' conflicts in whole or in part with the namespace name 'zControlsC.Random'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#RandomAlphaNumericSequence(System.Int32,zControlsC.Random.Random+RandomAlphaCharCase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AlphaNumeric" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="128">The compound word 'AlphaNumeric' in member name 'Random.RandomAlphaNumericSequence(int, Random.RandomAlphaCharCase)' exists as a discrete term. If your usage is intended to be single word, case it as 'Alphanumeric' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="128">In method 'Random.RandomAlphaNumericSequence(int, Random.RandomAlphaCharCase)', correct the spelling of 'i' in parameter name 'iLength' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="r" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="128">'r', a variable declared in 'Random.RandomAlphaNumericSequence(int, Random.RandomAlphaCharCase)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RandomColor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="r" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="63">'r', a variable declared in 'Random.RandomColor()', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RandomFileName()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="146">The 'this' parameter (or 'Me' in Visual Basic) of 'Random.RandomFileName()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RandomLetterSequence(System.Int32,zControlsC.Random.Random+RandomAlphaCharCase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="101">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Random.RandomLetterSequence(int, Random.RandomAlphaCharCase)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="110">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Random.RandomLetterSequence(int, Random.RandomAlphaCharCase)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="104">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Random.RandomLetterSequence(int, Random.RandomAlphaCharCase)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="114">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Random.RandomLetterSequence(int, Random.RandomAlphaCharCase)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RandomNumberSequence(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Random" File="Random.cs" Line="84">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'Random.RandomNumberSequence(int)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Random+RandomAlphaCharCase" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Random.RandomAlphaCharCase'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.RegexEx">
       <Types>
        <Type Name="RegexEx" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNewerVersion" Certainty="95" Level="CriticalError">Either replace the suffix 'Ex' in type name 'RegexEx' with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Issue>
          </Message>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'RegexEx' conflicts in whole or in part with the namespace name 'zControlsC.RegexEx'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsDate(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="58">Modify 'RegexEx.IsDate(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="55">In method 'RegexEx.IsDate(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="55">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'RegexEx.IsDate(string)' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsEmailAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="37">In method 'RegexEx.IsEmailAddress(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNumeric(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="48">In method 'RegexEx.IsNumeric(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsPhoneNumber(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="28">In method 'RegexEx.IsPhoneNumber(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsPostalCode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\RegexEx" File="Regex.cs" Line="43">In method 'RegexEx.IsPostalCode(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RegexEx+REGEXType" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'RegexEx.REGEXType'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'RegexEx.REGEXType' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'RegexEx.REGEXType' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Serialization">
       <Types>
        <Type Name="Serialize" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DeSerializeObject`1(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DeSerialize" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="60">The compound word 'DeSerialize' in member name 'Serialize.DeSerializeObject&lt;type&gt;(string, bool)' exists as a discrete term. If your usage is intended to be single word, case it as 'Deserialize' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="92">'Serialize.DeSerializeObject&lt;type&gt;(string, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="60">Consider a design where 'Serialize.DeSerializeObject&lt;type&gt;(string, bool)' doesn't require explicit type parameter 'type' in any call to it.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="60">On method 'Serialize.DeSerializeObject&lt;type&gt;(string, bool)', prefix generic type parameter name 'type' with 'T'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="76">Change 'Serialize.DeSerializeObject&lt;type&gt;(string, bool)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="64">Replace the call to 'string.operator ==(string, string)' in 'Serialize.DeSerializeObject&lt;type&gt;(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeObject(System.Object,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="45">Modify 'Serialize.SerializeObject(object, string, bool)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="17">In method 'Serialize.SerializeObject(object, string, bool)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\Serialization" File="Serialization.cs" Line="28">Replace the call to 'string.operator !=(string, string)' in 'Serialize.SerializeObject(object, string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.StringFunc">
       <Types>
        <Type Name="StringFunctions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Left(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="20">'StringFunctions.Left(string, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="16">In method 'StringFunctions.Left(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mid(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="77">'StringFunctions.Mid(string, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="68">In method 'StringFunctions.Mid(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="start-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="69">Correct the potential overflow in the operation 'start-1' in 'StringFunctions.Mid(string, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Mid(System.String,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="58">'StringFunctions.Mid(string, int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="48">In method 'StringFunctions.Mid(string, int, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="end-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="50">Correct the potential overflow in the operation 'end-1' in 'StringFunctions.Mid(string, int, int)'.</Issue>
            </Message>
            <Message Id="start-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="49">Correct the potential overflow in the operation 'start-1' in 'StringFunctions.Mid(string, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Right(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="38">'StringFunctions.Right(string, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\StringFunc" File="StringFunctions.cs" Line="30">In method 'StringFunctions.Right(string, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.UI_Controls">
       <Types>
        <Type Name="GifImage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetNextFrame()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="GifImage.cs" Line="52">Change 'GifImage.GetNextFrame()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InputBox" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#buttonCancel" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBox.buttonCancel' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#buttonOK" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBox.buttonOK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#errorProviderText" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBox.errorProviderText' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#labelPrompt" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBox.labelPrompt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Show(System.String,System.String,System.String,zControlsC.UI_Controls.InputBoxValidatingHandler,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="xpos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="InputBox.cs" Line="177">In method 'InputBox.Show(string, string, string, InputBoxValidatingHandler, int, int)', correct the spelling of 'xpos' in parameter name 'xpos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ypos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="InputBox.cs" Line="177">In method 'InputBox.Show(string, string, string, InputBoxValidatingHandler, int, int)', correct the spelling of 'ypos' in parameter name 'ypos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#textBoxText" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBox.textBoxText' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InputBoxResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OK" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBoxResult.OK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Text" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBoxResult.Text' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InputBoxValidatingArgs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'InputBoxValidatingArgs' to end in 'EventArgs'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Cancel" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBoxValidatingArgs.Cancel' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Message" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBoxValidatingArgs.Message' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Text" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InputBoxValidatingArgs.Text' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InputBoxValidatingHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'InputBoxValidatingHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLabel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="_TextFormat" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zLabel.Designer.cs" Line="16">'zLabel' contains field 'zLabel._TextFormat' that is of IDisposable type: 'StringFormat'. Change the Dispose method on 'zLabel' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error">Modify 'zLabel.~zLabel()' so that it calls Dispose(false) and then returns.</Issue>
             <Issue Name="FinalizeOverride" Certainty="95" Level="Error">Remove the finalizer from type 'zLabel', override Dispose(bool disposing), and put the finalization logic in the code path where 'disposing' is false.</Issue>
            </Message>
            <Message TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'zLabel' implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnPaint(System.Windows.Forms.PaintEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Drawing.Rectangle" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zLabel.cs" Line="488">'zLabel.OnPaint(PaintEventArgs)' creates a new instance of 'Rectangle' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WndProc(System.Windows.Forms.Message&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zLabel.cs" Line="461">'zLabel.WndProc(ref Message)' calls into 'UserControl.WndProc(ref Message)' which has a LinkDemand. By making this call, 'UserControl.WndProc(ref Message)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'zLabel.WndProc(ref Message)'&#xD;&#xA;   -&gt;'zLabel.WndProc(ref Message)'</Issue>
            </Message>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zLabel.cs" Line="461">Add the following security attribute to 'zLabel.WndProc(ref Message)' in order to match a LinkDemand on base method 'UserControl.WndProc(ref Message)':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zLabel+IconAlignmentEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLabel.IconAlignmentEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLabel.IconAlignmentEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLabel+IconSizeEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'zLabel.IconSizeEnum' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLabel.IconSizeEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLabel.IconSizeEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zLabel+RoundedCornersEnum" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'zLabel.RoundedCornersEnum' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'zLabel.RoundedCornersEnum' so that it does not end in 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zLabel.RoundedCornersEnum'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zNavigatorTree" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_Width" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'zNavigatorTree._Width' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddNode(zControlsC.UI_Controls.zTreeNode)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="279">In method 'zNavigatorTree.AddNode(zTreeNode)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BindingContext" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="569">Change 'zNavigatorTree.BindingContext' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateParams" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CreateParams()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
               <Issue Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="600">'zNavigatorTree.CreateParams.get()' calls into 'UserControl.CreateParams.get()' which has a LinkDemand. By making this call, 'UserControl.CreateParams.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'zNavigatorTree.CreateParams.get()'&#xD;&#xA;   -&gt;'zNavigatorTree.CreateParams.get()'</Issue>
              </Message>
              <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
               <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="600">Add the following security attribute to 'zNavigatorTree.CreateParams.get()' in order to match a LinkDemand on base method 'UserControl.CreateParams.get()':  [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)].</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="477">Change 'zNavigatorTree.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="477">Modify 'zNavigatorTree.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zNavigatorTree.cs" Line="477">Rename 'zNavigatorTree.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zNavigatorTree+zNavigatorTreeState" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zNavigatorTree.zNavigatorTreeState'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="zTreeNode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'zTreeNode' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy:  System.Windows.Forms.TreeNode</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">Add [Serializable] to 'zTreeNode' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="subText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeNode.cs" Line="18">In member 'zTreeNode.zTreeNode(string, string)', the compound word 'subText' in parameter name 'subText' exists as a discrete term. If your usage is intended to be single word, case it as 'subtext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="subText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeNode.cs" Line="18">In member 'zTreeNode.zTreeNode(string, string, Color, Color, Color)', the compound word 'subText' in parameter name 'subText' exists as a discrete term. If your usage is intended to be single word, case it as 'subtext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.Drawing.Image)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="subText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeNode.cs" Line="18">In member 'zTreeNode.zTreeNode(string, string, Image)', the compound word 'subText' in parameter name 'subText' exists as a discrete term. If your usage is intended to be single word, case it as 'subtext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String,System.Drawing.Image,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="subText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeNode.cs" Line="18">In member 'zTreeNode.zTreeNode(string, string, Image, Color, Color, Color)', the compound word 'subText' in parameter name 'subText' exists as a discrete term. If your usage is intended to be single word, case it as 'subtext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubText" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeNode.cs" Line="54">The compound word 'SubText' in member name 'zTreeNode.SubText' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubTextColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeNode.cs" Line="60">The compound word 'SubText' in member name 'zTreeNode.SubTextColor' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zTreeView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CollpaseIcon" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Collpase" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeView.cs" Line="146">Correct the spelling of 'Collpase' in member name 'zTreeView.CollpaseIcon' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeView.cs" Line="318">'zTreeView.OnDrawNode(DrawTreeNodeEventArgs)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.Drawing.Rectangle" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="J:\SourceCode\C#\zControlsC\zControlsC\UI_Controls" File="zTreeView.cs" Line="391">'zTreeView.OnDrawNode(DrawTreeNodeEventArgs)' creates a new instance of 'Rectangle' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="zTreeView+zTreeViewExpandedIconSet" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'zTreeView.zTreeViewExpandedIconSet'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.WindowsAPI">
       <Types>
        <Type Name="Win32" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="System" Certainty="95" Level="Error">The type name 'Win32' conflicts in whole or in part with the namespace name 'Microsoft.Win32' defined in the .NET Framework. Rename the type to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AlphaBlend(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,zControlsC.WindowsAPI.Win32+BLENDFUNCTION)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Dest' in parameter name 'hdcDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Dest' in parameter name 'nHeightDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Dest' in parameter name 'nWidthDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Dest' in parameter name 'nXOriginDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Dest' in parameter name 'nYOriginDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Src" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Src' in parameter name 'hdcSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Src' in parameter name 'nHeightSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Src' in parameter name 'nWidthSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Src' in parameter name 'nXOriginSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'Src' in parameter name 'nYOriginSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nHeightDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nHeightSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nWidthDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nWidthSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nXOriginDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nXOriginSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nYOriginDest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)', correct the spelling of 'n' in parameter name 'nYOriginSrc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.AlphaBlend(IntPtr, int, int, int, int, IntPtr, int, int, int, int, Win32.BLENDFUNCTION)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BeginPaint(System.IntPtr,zControlsC.WindowsAPI.Win32+PAINTSTRUCT&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.BeginPaint(IntPtr, out Win32.PAINTSTRUCT)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.BeginPaint(IntPtr, out Win32.PAINTSTRUCT)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,zControlsC.WindowsAPI.Win32+TernaryRasterOperations)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.BitBlt(IntPtr, int, int, int, int, IntPtr, int, int, Win32.TernaryRasterOperations)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.BitBlt(IntPtr, int, int, int, int, IntPtr, int, int, Win32.TernaryRasterOperations)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CombineRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CombineRgn(IntPtr, IntPtr, IntPtr, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CombineRgn(IntPtr, IntPtr, IntPtr, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreateBitmap(int, int, uint, uint, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreateBitmap(int, int, uint, uint, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreateCompatibleBitmap(IntPtr, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreateCompatibleBitmap(IntPtr, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateCompatibleDC(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreateCompatibleDC(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreateCompatibleDC(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDC(System.String,System.String,System.String,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreateDC(string, string, string, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreateDC(string, string, string, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszDriver' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszDevice' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszOutput' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreatePen(System.Int32,System.Int32,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreatePen(int, int, uint)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreatePen(int, int, uint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreateRectRgn(int, int, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreateRectRgn(int, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSolidBrush(System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.CreateSolidBrush(uint)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.CreateSolidBrush(uint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteDC(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.DeleteDC(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.DeleteDC(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteObject(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.DeleteObject(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.DeleteObject(IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.DeleteObject(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Ellipse(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.Ellipse(IntPtr, int, int, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.Ellipse(IntPtr, int, int, int, int)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.Ellipse(IntPtr, int, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnumChildWindows(System.Int32,System.Delegate,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Param" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.EnumChildWindows(int, Delegate, int)', correct the spelling of 'Param' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.EnumChildWindows(int, Delegate, int)', correct the spelling of 'Wnd' in parameter name 'hWndParent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.EnumChildWindows(int, Delegate, int)', correct the spelling of 'h' in parameter name 'hWndParent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="l" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.EnumChildWindows(int, Delegate, int)', correct the spelling of 'l' in parameter name 'lParam' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.EnumChildWindows(int, Delegate, int)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.EnumChildWindows(int, Delegate, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.EnumChildWindows(int, Delegate, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExcludeClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.ExcludeClipRect(IntPtr, int, int, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.ExcludeClipRect(IntPtr, int, int, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtEscape(System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.ExtEscape(IntPtr, int, int, string, int, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.ExtEscape(IntPtr, int, int, string, int, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="3" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpszInData' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillRect(System.IntPtr,zControlsC.WindowsAPI.Win32+RECT&amp;,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.FillRect(IntPtr, ref Win32.RECT, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.FillRect(IntPtr, ref Win32.RECT, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillRgn(System.IntPtr,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.FillRgn(IntPtr, IntPtr, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.FillRgn(IntPtr, IntPtr, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.FillRgn(IntPtr, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindWindow(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.FindWindow(string, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.FindWindow(string, string)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpClassName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpWindowName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetClipBox(System.IntPtr,zControlsC.WindowsAPI.Win32+RECT&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetClipBox(IntPtr, out Win32.RECT)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetClipBox(IntPtr, out Win32.RECT)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetClipRgn(System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetClipRgn(IntPtr, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetClipRgn(IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCurrentPositionEx(System.IntPtr,zControlsC.WindowsAPI.Win32+POINT&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetCurrentPositionEx(IntPtr, out Win32.POINT)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.GetCurrentPositionEx(IntPtr, out Win32.POINT)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetCurrentPositionEx(IntPtr, out Win32.POINT)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDesktopWindow()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetDesktopWindow()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.GetDesktopWindow()' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Win32.GetDesktopWindow()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetForegroundWindow()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetForegroundWindow()' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetForegroundWindow()' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNearestColor(System.IntPtr,System.UInt32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetNearestColor(IntPtr, uint)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetNearestColor(IntPtr, uint)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObject(System.IntPtr,System.Int32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetObject(IntPtr, int, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetObject(IntPtr, int, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetObjectType(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetObjectType(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetObjectType(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPixel(System.IntPtr,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetPixel(IntPtr, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetPixel(IntPtr, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRegionData(System.IntPtr,System.UInt32,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetRegionData(IntPtr, uint, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetRegionData(IntPtr, uint, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRgnBox(System.IntPtr,zControlsC.WindowsAPI.Win32+RECT&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetRgnBox(IntPtr, out Win32.RECT)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetRgnBox(IntPtr, out Win32.RECT)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUpdateRect(System.Runtime.InteropServices.HandleRef,zControlsC.WindowsAPI.Win32+RECT&amp;,System.Boolean)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetUpdateRect(HandleRef, out Win32.RECT, bool)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetUpdateRect(HandleRef, out Win32.RECT, bool)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUpdateRgn(System.IntPtr,System.IntPtr,System.Boolean)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetUpdateRgn(IntPtr, IntPtr, bool)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'bErase' of P/Invoke 'Win32.GetUpdateRgn(IntPtr, IntPtr, bool)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetUpdateRgn(IntPtr, IntPtr, bool)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowDC(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.GetWindowDC(IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetWindowDC(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowText(System.Int32,System.Text.StringBuilder,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Wnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.GetWindowText(int, StringBuilder, int)', correct the spelling of 'Wnd' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="h" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.GetWindowText(int, StringBuilder, int)', correct the spelling of 'h' in parameter name 'hWnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.GetWindowText(int, StringBuilder, int)', correct the spelling of 'n' in parameter name 'nMaxCount' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'Win32.GetWindowText(int, StringBuilder, int)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetWindowText(int, StringBuilder, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.GetWindowText(int, StringBuilder, int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 's' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWindowTextLength(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="hwnd" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'Win32.GetWindowTextLength(int)', correct the spelling of 'hwnd' in parameter name 'hwnd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.GetWindowTextLength(int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Win32.GetWindowTextLength(int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MessageBox(System.Int32,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.MessageBox(int, string, string, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.MessageBox(int, string, string, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'msg' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="2" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'Caption' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message TypeName="UseManagedEquivalentsOfWin32Api" Category="Microsoft.Usage" CheckId="CA2205" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="PlatformInvokeDeclaration" Certainty="50" Level="Error">Remove the declaration for 'Win32.MessageBox(int, string, string, int)'. Callers should use the following managed alternative: System.Windows.Forms.MessageBox.Show</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.PostMessage(IntPtr, uint, IntPtr, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="95" Level="Warning">Add the MarshalAsAttribute to the return type of P/Invoke 'Win32.PostMessage(IntPtr, uint, IntPtr, IntPtr)'. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.PostMessage(IntPtr, uint, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.SendMessage(IntPtr, uint, IntPtr, IntPtr)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SendMessage(IntPtr, uint, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetForegroundWindow(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'Win32.SetForegroundWindow(int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Win32.SetForegroundWindow(int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Win32+BLENDFUNCTION" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Win32.BLENDFUNCTION'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Win32.BLENDFUNCTION' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Win32.BLENDFUNCTION' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Byte,System.Byte,System.Byte,System.Byte)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="328">In member 'Win32.BLENDFUNCTION.BLENDFUNCTION(byte, byte, byte, byte)', replace the term 'flags' in parameter name 'flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Win32+CombineRgnStyles" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'Win32.CombineRgnStyles' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message Id="Rgn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rgn' in type name 'Win32.CombineRgnStyles'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Win32.CombineRgnStyles'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Win32.CombineRgnStyles' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Win32+PenStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Win32.PenStyle'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Win32+POINT" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Win32.POINT'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Win32.POINT' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Win32.POINT' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="255">In method 'Win32.POINT.POINT(int, int)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="255">In method 'Win32.POINT.POINT(int, int)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Implicit(System.Drawing.Point):zControlsC.WindowsAPI.Win32+POINT" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="266">In method 'Win32.POINT.implicit operator Win32.POINT(Point)', consider providing a more meaningful name than parameter name 'p'.</Issue>
            </Message>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Multiple" Certainty="50" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="266">Provide a method named 'ToXXX' or 'FromXXX' as an alternate for operator 'Win32.POINT.implicit operator Win32.POINT(Point)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Implicit(zControlsC.WindowsAPI.Win32+POINT):System.Drawing.Point" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="261">In method 'Win32.POINT.implicit operator Point(Win32.POINT)', consider providing a more meaningful name than parameter name 'p'.</Issue>
            </Message>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Name="Multiple" Certainty="50" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="261">Provide a method named 'ToXXX' or 'FromXXX' as an alternate for operator 'Win32.POINT.implicit operator Point(Win32.POINT)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#X" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Win32.POINT.X' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'Win32.POINT.X'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Win32.POINT.Y' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'Win32.POINT.Y'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Win32+RECT" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Win32.RECT'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="481">In member 'Win32.RECT.Equals(object)', change parameter name 'Object' to 'obj' in order to match the identifier as it has been declared in 'ValueType.Equals(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#X" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="383">Consider providing a more meaningful name than member name 'Win32.RECT.X'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="J:\SourceCode\C#\zControlsC\zControlsC\WindowsAPI" File="Win32.cs" Line="388">Consider providing a more meaningful name than member name 'Win32.RECT.Y'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Win32+RGNDATAHEADER" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Win32.RGNDATAHEADER'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'Win32.RGNDATAHEADER' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'Win32.RGNDATAHEADER' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="zControlsC.Zip">
       <Types>
        <Type Name="Zip" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'Zip' conflicts in whole or in part with the namespace name 'zControlsC.Zip'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#UnZipFile(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnZip" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Zip" File="Zip.cs" Line="137">The compound word 'UnZip' in member name 'Zip.UnZipFile(string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unzip' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Zip" File="Zip.cs" Line="153">Modify 'Zip.UnZipFile(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnZipFile(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnZip" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Zip" File="Zip.cs" Line="92">The compound word 'UnZip' in member name 'Zip.UnZipFile(string, string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unzip' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Zip" File="Zip.cs" Line="127">Modify 'Zip.UnZipFile(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ZipFile(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="J:\SourceCode\C#\zControlsC\zControlsC\Zip" File="Zip.cs" Line="82">Modify 'Zip.ZipFile(string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2010-08-17 02:49:17Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="J:\SourceCode\C#\zControlsC\zControlsC\Zip" File="Zip.cs" Line="84">Change 'Zip.ZipFile(string, string)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182126(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.GC.Collect">Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb385973(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="ReliabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182212(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="MaintainabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182264(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505">
   <Name>Avoid unmaintainable code</Name>
   <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb386043(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="MaintainabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms245042(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182269(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182327(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405">
   <Name>COM visible type base types should be COM visible</Name>
   <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
   <Resolution Name="Default">{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182202(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberParameterShouldBeDiscreteTerm">In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb264474(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/3hk32yyz(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182328(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182137(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182141(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182142(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="ObjectCreation">{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Resolution>
   <Resolution Name="StringCreation">{0} calls {1} but does not use the new string instance that the method returns. Pass the instance as an argument to another method, assign the instance to a variable, or remove the call if it is unnecessary.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182273(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182303(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182144(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182146(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182338(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotUseTimersThatPreventPowerStateChanges" Category="Microsoft.Mobility" CheckId="CA1601">
   <Name>Do not use timers that prevent power state changes</Name>
   <Description>Do not poll more often than or utilize timers that fire more frequently than once per second. Higher frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.</Description>
   <Resolution Name="Default">Modify the call to {0} in method {1} to set the timer interval to a value that's greater than or equal to one second.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182230(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="MobilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="NotFlagsNoZeroValue">Add a member to {0} that has a value of zero with a suggested name of 'None'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182149(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182150(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb264492(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="MethodTypeParameter">On method {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182243(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182244(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182234(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNewerVersion">Either replace the suffix '{0}' in type name {1} with the suggested numeric alternate '2' or provide a more meaningful suffix that distinguishes it from the type it replaces.</Resolution>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182247(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182248(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="FinalizeImplementation">Modify {0} so that it calls Dispose(false) and then returns.</Resolution>
   <Resolution Name="FinalizeOverride">Remove the finalizer from type {0}, override Dispose(bool disposing), and put the finalization logic in the code path where 'disposing' is false.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Resolution Name="RenameDispose">Rename {0} to 'Dispose' and ensure that it is declared as public and sealed.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms244737(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182153(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAllNonSerializableFields" Category="Microsoft.Usage" CheckId="CA2235">
   <Name>Mark all non-serializable fields</Name>
   <Description>All fields that cannot be serialized directly should have the NonSerializedAttribute. Types that have the SerializableAttribute should not have fields of types that do not have the SerializableAttribute unless the fields are marked with the NonSerializedAttribute.</Description>
   <Resolution Name="Default">Field {0} is a member of type {1}, which is serializable, but is of type {2}, which is not serializable. Add the NonSerializedAttribute to {0}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182349(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017">
   <Name>Mark assemblies with ComVisibleAttribute</Name>
   <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
   <Resolution Name="AttributeTrue">Consider changing the ComVisible attribute on {0} to false, and opting in at the type level.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182157(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError, Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Default">Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Resolution Name="Return">Add the MarshalAsAttribute to the return type of P/Invoke {0}. If the corresponding unmanaged return type is a 4-byte Win32 'BOOL', use MarshalAs(UnmanagedType.Bool). For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182206(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182350(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms245046(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182161(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182162(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717">
   <Name>Only FlagsAttribute enums should have plural names</Name>
   <Description>Plural names indicate that the values of the enumeration can be combined. For example, an enumeration named 'Day' indicates a single day, and an enumeration named 'Days' indicates multiple days. Enumeration values should be combined using the bit-wise OR operator only if the Flags attribute is present on the enumeration.</Description>
   <Resolution Name="Default">If the name {0} is plural, change it to its singular form.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb264487(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182354(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
   <Name>Operator overloads have named alternates</Name>
   <Description>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</Description>
   <Resolution Name="Multiple">Provide a method named '{0}' or '{1}' as an alternate for operator {2}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182355(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231">
   <Name>Overload operator equals on overriding ValueType.Equals</Name>
   <Description>Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</Description>
   <Resolution Name="Default">Because {0} is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182359(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182276(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123">
   <Name>Override link demands should be identical to base</Name>
   <Description>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. Because it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</Description>
   <Resolution Name="BaseOnly">Add the following security attribute to {0} in order to match a LinkDemand on base method {1}:  {2}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182305(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="SecurityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
   <Name>Override methods on comparable types</Name>
   <Description>Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
   <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182163(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182209(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="InteroperabilityRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182251(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814">
   <Name>Prefer jagged arrays over multidimensional</Name>
   <Description>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</Description>
   <Resolution Name="Default">{0} is a multidimensional array. Replace it with a jagged array if possible.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182277(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821">
   <Name>Remove empty finalizers</Name>
   <Description>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</Description>
   <Resolution Name="Default">{0} implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb264476(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182278(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182268(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SetLocaleForDataTypes" Category="Microsoft.Globalization" CheckId="CA1306">
   <Name>Set locale for data types</Name>
   <Description>In most cases, Locale should be explicitly set to CultureInfo.InvariantCulture on DataSet and DataTable instances. Upon creation of a DataSet or DataTable instance, the Locale is set to the current culture. In most cases, the Locale should be set to CultureInfo.InvariantCulture to guarantee proper sorting behavior in all cultures.</Description>
   <Resolution Name="Default">Be sure to set the {0} Locale property wherever {1} creates an instance of that type.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182188(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182189(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182190(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182319(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182191(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a StringComparison. This should be replaced with a call to {2}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb386080(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182279(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
   <Name>Type names should not match namespaces</Name>
   <Description>Identifiers which conflict in whole or in part with namespace names should be avoided. Names that describe the purpose or contents of a type are preferred.</Description>
   <Resolution Name="Default">The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</Resolution>
   <Resolution Name="System">The type name {0} conflicts in whole or in part with the namespace name '{1}' defined in the .NET Framework. Rename the type to eliminate the conflict.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182257(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182172(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
   <Name>Use generic event handler instances</Name>
   <Description>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
   <Resolution Name="Default">Remove {0} and replace its usage with EventHandler&lt;T&gt;</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182178(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UseManagedEquivalentsOfWin32Api" Category="Microsoft.Usage" CheckId="CA2205">
   <Name>Use managed equivalents of Win32 API</Name>
   <Description>Use managed equivalents to Win32 API whenever possible.</Description>
   <Resolution Name="PlatformInvokeDeclaration">Remove the declaration for {0}. Callers should use the following managed alternative: {1}</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182365(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182258(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182181(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Local">{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182216(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="MaintainabilityRules.dll" Version="9.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
